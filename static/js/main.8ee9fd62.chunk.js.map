{"version":3,"sources":["GlobalStyles.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/localStorage/localStorage.js","features/tasks/tasksSlice.js","features/tasks/localStorage/localStorageKeys.js","features/tasks/TasksPage/headerButtonsStyles/index.js","features/tasks/TasksPage/TopButton/index.js","features/tasks/TasksPage/TopButton/useLoadingStatus.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/ListButtons/index.js","features/tasks/TasksPage/queryHooks/useQueryParameter.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/useEditedTaskContent.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/queryHooks/searchQueryParamName.js","features/tasks/TasksPage/queryHooks/useReplaceQueryParameter.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/TaskPageBody/styled.js","features/tasks/TaskPage/TaskPageBody/index.js","features/tasks/TaskPage/index.js","features/author/index.js","common/NavigationStyles/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gray","StyledContainer","styled","main","breakpoint","tabletMax","Container","children","StyledHeader","header","Title","h1","Header","title","className","StyledSection","section","white","HeaderContainer","div","mobileMax","h2","Body","Section","body","extraHeaderContent","saveToLocalStorage","key","state","localStorage","setItem","JSON","stringify","getFromLocalStorage","initialState","parse","getItem","tasksSlice","createSlice","name","tasks","hideDone","loadingStatus","reducers","addTask","task","payload","push","toggleHideDone","toggleTaskDone","index","findIndex","id","done","setTaskInEdition","forEach","inEdition","finishTasksEdition","editTaskContent","content","removeTask","splice","setAllDone","setLoadingStatus","fetchExampleTasks","setTasks","exampleTasks","actions","selectListInformation","listInformation","selectTasks","selectHideDone","selectLoadingStatus","selectTasksLength","length","selectTaskNotDoneLength","filter","getTaskById","taskId","find","getInEditionTask","ButtonContainer","HeaderButton","button","teal","invisible","css","TopButton","dispatch","useDispatch","useSelector","loadingText","loading","failed","useLoadingStatus","disabled","onClick","StyledForm","form","Button","Input","input","silver","Form","useState","newTaskContent","setNewTaskContent","trimmedNewTaskContent","trim","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","nanoid","ref","placeholder","value","onChange","target","ListButtons","tasksNotDoneLength","tasksLength","useQueryParameter","parameter","location","useLocation","URLSearchParams","search","get","List","ul","Item","li","hidden","Text","span","StyledLink","Link","toggleDone","green","remove","red","edit","save","orange","useEditedTaskContent","inEditionTask","inEditionTaskContent","editedTaskContent","setEditedTaskContent","onClickTaskEdition","taskContent","onFormSubmit","taskID","alert","TasksList","query","toUpperCase","includes","selectTasksByQuery","map","to","useReplaceQueryParameter","history","useHistory","searchParams","set","delete","replace","pathname","toString","Wrapper","Search","replaceQueryParameter","undefined","TasksPage","p","ContentText","LabelText","TaskPageBody","useParams","TaskPage","Author","StyledNav","NavItems","StyledNavLink","NavLink","attrs","props","activeClassName","App","path","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksToLocalStorageHandler","saveHideDoneToLocalStorageHandler","tasksSaga","put","delay","call","select","takeEvery","type","takeLatest","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ee9fd62.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gray};\r\n        font-family: 'Montserrat', sans-serif;\r\n        word-break: break-all;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 0 15px;\r\n    }\r\n`","import React from \"react\"\r\nimport {StyledContainer} from \"./styled\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n)\r\n\r\nexport default Container","import styled from \"styled-components\"\r\n\r\nexport const StyledHeader = styled.header`\r\n    padding: 40px 0 20px 0;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 35px;\r\n    margin: 0;\r\n`","import React from \"react\"\r\nimport {StyledHeader, Title} from \"./styled\"\r\n\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader\r\n        className=\"header\"\r\n    >\r\n        <Title>\r\n            {title}\r\n        </Title>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header","import styled from \"styled-components\"\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-bottom: 10px;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n    padding: 25px;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-wrap: wrap;\r\n        flex-direction: column;\r\n}\r\n`\r\n\r\nexport const Header = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n`\r\n\r\nexport const Body = styled.section`\r\n    padding: 10px 25px;\r\n`\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { StyledSection, HeaderContainer, Header, Body } from \"./styled\"\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n\r\n    </StyledSection>\r\n)\r\n\r\n\r\nexport default Section","\r\nexport const saveToLocalStorage = (key, state) => {\r\n    localStorage.setItem(key, JSON.stringify(state))\r\n}\r\n\r\nexport const getFromLocalStorage = (key, initialState) =>  JSON.parse(localStorage.getItem(key)) || initialState\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { getFromLocalStorage } from \"./localStorage/localStorage\";\r\nimport {tasksKey, hideDoneKey} from \"./localStorage/localStorageKeys\"\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"listInformation\",\r\n    initialState: {\r\n        tasks: getFromLocalStorage(tasksKey, []),\r\n        hideDone: getFromLocalStorage(hideDoneKey, false),\r\n        loadingStatus: \"initial\",\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done\r\n        },\r\n        setTaskInEdition: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.forEach((task) => task.inEdition = false)\r\n            tasks[index].inEdition = true\r\n        },\r\n        finishTasksEdition:({tasks}) => {\r\n            tasks.forEach((task) => task.inEdition = false)\r\n        },\r\n        editTaskContent: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload.id)\r\n            tasks[index].content = payload.content\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.splice(index, 1)\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach((task) => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        setLoadingStatus: (state, { payload }) => {\r\n            state.loadingStatus = payload\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: exampleTasks }) => {\r\n            state.tasks = exampleTasks\r\n        }\r\n    },\r\n}\r\n)\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    setTaskInEdition,\r\n    finishTasksEdition,\r\n    editTaskContent,\r\n    removeTask,\r\n    setAllDone,\r\n    setLoadingStatus,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\n\r\nexport const selectListInformation = state => state.listInformation;\r\nexport const selectTasks = state => selectListInformation(state).tasks;\r\nexport const selectHideDone = state => selectListInformation(state).hideDone;\r\nexport const selectLoadingStatus = state => selectListInformation(state).loadingStatus\r\nexport const selectTasksLength = state => selectTasks(state).length;\r\nexport const selectTaskNotDoneLength = state => selectTasks(state).filter(({ done }) => !done).length;\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\nexport const getInEditionTask = state => selectTasks(state).find(({ inEdition }) => inEdition === true);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks\r\n    }\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.toUpperCase().trim()));\r\n};\r\n\r\nexport default tasksSlice.reducer\r\n\r\n","export const tasksKey = \"tasks\"\r\nexport const hideDoneKey = \"hideDone\"","import styled, { css } from \"styled-components\"\r\n\r\nexport const ButtonContainer = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const HeaderButton = styled.button`\r\n    border: none;\r\n    padding: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.3s;\r\n\r\n    ${({ invisible }) => invisible && css`\r\n        display: none;\r\n    `\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.gray}\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-top: 30px\r\n    }\r\n`","import React from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { fetchExampleTasks } from \"../../tasksSlice\"\r\nimport { ButtonContainer, HeaderButton } from \"../headerButtonsStyles\"\r\nimport { useLoadingStatus } from \"./useLoadingStatus\"\r\n\r\nconst TopButton = () => {\r\n    const dispatch = useDispatch()\r\n    const {loadingText, loading, failed} = useLoadingStatus()\r\n    return (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                disabled={loading || failed? true : false}\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n            >\r\n                {loadingText()}\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default TopButton","import { useSelector } from \"react-redux\"\r\nimport { selectLoadingStatus } from \"../../tasksSlice\"\r\n\r\nexport const useLoadingStatus = () => {\r\n    const loadingStatus = useSelector(selectLoadingStatus);\r\n    const loading = loadingStatus === \"loading\" ? true : false\r\n    const failed = loadingStatus === \"failed\" ? true : false\r\n\r\n    const loadingText = () => {\r\n        switch (loadingStatus) {\r\n            case \"loading\":\r\n                return \"Ładowanie...\"\r\n            case \"failed\":\r\n                return \"Coś poszło nie tak, przeładuj stronę i spróbuj ponownie\"\r\n            default:\r\n                return \"Pobierz przykładowe zadania\"\r\n\r\n        }\r\n    }\r\n\r\n    return {loadingText, loading, failed}\r\n}","\r\nimport styled from \"styled-components\"\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 20%;\r\n    align-self: center;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        min-width: 230px;\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nconst  Input = styled.input`\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    margin-left: 0px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 2px ${({ theme }) => theme.color.silver};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px;\r\n    }\r\n`\r\n\r\nexport default Input","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\"\r\nimport { nanoid } from \"@reduxjs/toolkit\"\r\nimport { addTask } from \"../../tasksSlice\"\r\nimport { StyledForm, Button} from \"./styled\"\r\nimport Input from \"../Input\"\r\n\r\nconst Form = () => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const trimmedNewTaskContent = newTaskContent.trim()\r\n    const dispatch = useDispatch()\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid(),\r\n                inEdition: false\r\n            }))\r\n        };\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n    const inputRef = useRef(null)\r\n    const focusInput = () => {\r\n        inputRef.current.focus()\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>\r\n                Dodaj Zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { selectHideDone, toggleHideDone, setAllDone, selectTaskNotDoneLength, selectTasksLength } from \"../../tasksSlice\"\r\nimport { ButtonContainer, HeaderButton } from \"../headerButtonsStyles\"\r\n\r\nconst ListButtons = () => {\r\n\r\n    const hideDone  = useSelector(selectHideDone);\r\n    const tasksNotDoneLength = useSelector(selectTaskNotDoneLength)\r\n    const tasksLength = useSelector(selectTasksLength)\r\n    const dispatch = useDispatch()\r\n\r\n    return tasksLength > 0 && (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n            </HeaderButton>\r\n                <HeaderButton\r\n                disabled={tasksNotDoneLength > 0 ? false : true}\r\n                onClick={() => dispatch(setAllDone())}\r\n            >\r\n                Ukończ wszystkie\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\nexport default ListButtons","import { useLocation } from \"react-router-dom\"\r\n\r\nconst useQueryParameter = (parameter) => {\r\n    const location = useLocation()\r\n    return (new URLSearchParams(location.search)).get(parameter)\r\n}\r\n\r\nexport default useQueryParameter\r\n","import styled, { css } from \"styled-components\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0px;\r\n\r\n`\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    display: flex;\r\n    margin: 30px 0px;\r\n    line-height: 1.5em;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 20px 0;\r\n    }\r\n`\r\n\r\nexport const Text = styled.span`\r\n    flex-basis: 100%;\r\n    flex-shrink: 1;\r\n    margin: 0 20px;\r\n`\r\n\r\nexport const StyledLink = styled(Link)`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    text-decoration: none;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n    \r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    outline: none;\r\n    color: ${({ theme }) => theme.color.white};\r\n    font-weight: bold;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n\r\n    ${({ edit }) => edit && css`\r\n        background-color: ${({ theme }) => theme.color.teal};\r\n        margin: 0px 5px;\r\n    `}\r\n\r\n    ${({ save }) => save && css`\r\n        background-color: ${({ theme }) => theme.color.orange};\r\n    `}\r\n\r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n\r\n    &:active {\r\n            filter: brightness(120%)\r\n        }\r\n`\r\n\r\nexport const Form = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-left: 10px;\r\n`","import { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n    editTaskContent,\r\n    finishTasksEdition,\r\n    getInEditionTask,\r\n    setTaskInEdition\r\n} from \"./tasksSlice\"\r\n\r\nexport const useEditedTaskContent = () => {\r\n    const inEditionTask = useSelector(getInEditionTask)\r\n    const inEditionTaskContent = inEditionTask ? inEditionTask.content : \"\"\r\n    const [editedTaskContent, setEditedTaskContent] = useState(inEditionTaskContent)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickTaskEdition = (taskId, taskContent) => {\r\n        dispatch(setTaskInEdition(taskId));\r\n        setEditedTaskContent(taskContent)\r\n    }\r\n\r\n    const onFormSubmit = (event, taskID) => {\r\n        event.preventDefault()\r\n        if (editedTaskContent.trim() !== \"\") {\r\n            dispatch(editTaskContent({ id: taskID, content: editedTaskContent }))\r\n            dispatch(finishTasksEdition())\r\n        } else {\r\n            alert(\"Nie można zapisać pustego zadania\")\r\n        }\r\n    }\r\n\r\n    return { editedTaskContent, setEditedTaskContent, onClickTaskEdition, onFormSubmit }\r\n}","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport {\r\n    toggleTaskDone,\r\n    removeTask,\r\n    selectHideDone,\r\n    selectTasksByQuery,\r\n} from \"../../tasksSlice\";\r\nimport useQueryParameter from \"../queryHooks/useQueryParameter\";\r\nimport searchQueryParamName from \"../queryHooks/searchQueryParamName\"\r\nimport { List, Item, Text, Button, StyledLink, Form } from \"./styled\"\r\nimport Input from \"../Input\"\r\nimport { useEditedTaskContent } from \"../../useEditedTaskContent\";\r\n\r\nconst TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParamName)\r\n    const {\r\n        editedTaskContent,\r\n        setEditedTaskContent,\r\n        onClickTaskEdition,\r\n        onFormSubmit\r\n    } = useEditedTaskContent()\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query))\r\n    const hideDone = useSelector(selectHideDone)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone ? true : false}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    { task.inEdition === false ? (\r\n                        <Text>\r\n                            <StyledLink\r\n                                to={`/zadania/${task.id}`}\r\n                                done={task.done ? true : false}\r\n                            >\r\n\r\n                                {task.content}\r\n\r\n                            </StyledLink>\r\n                        </Text>\r\n                    ) : (\r\n                            <Form\r\n                                onSubmit={(event) => onFormSubmit(event, task.id)}\r\n                            >\r\n                                <Input\r\n                                    value={editedTaskContent}\r\n                                    onChange={({ target }) => setEditedTaskContent(target.value)}\r\n                                />\r\n                                <Button\r\n                                    save\r\n                                >\r\n                                    S\r\n                                </Button>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                    <Button\r\n                        edit\r\n                        onClick={() => onClickTaskEdition(task.id, task.content)}\r\n                    >\r\n                        {task.inEdition ? \"R\" : \"E\"}\r\n                    </Button>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id, 1))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TasksList","const searchQueryParamName = \"szukaj\"\r\n\r\nexport default searchQueryParamName","import { useLocation, useHistory } from \"react-router-dom\"\r\n\r\nconst useReplaceQueryParameter = () => {\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const searchParams = new URLSearchParams(location.search)\r\n    const setQueryValue = ({ key, value }) => {\r\n        if (!value) {\r\n            searchParams.delete(key)\r\n        } else {\r\n            searchParams.set(key, value)\r\n        }\r\n        history.replace(`${location.pathname}?${searchParams.toString()}`)\r\n    }\r\n    return setQueryValue\r\n};\r\n\r\nexport default useReplaceQueryParameter","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.section`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`","import React from \"react\"\r\nimport useQueryParameter from \"../queryHooks/useQueryParameter\";\r\nimport useReplaceQueryParameter from \"../queryHooks/useReplaceQueryParameter\"\r\nimport searchQueryParamName from \"../queryHooks/searchQueryParamName\"\r\nimport Input from \"../Input\"\r\nimport { Wrapper } from \"./styled\"\r\n\r\n\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName)\r\n    const replaceQueryParameter = useReplaceQueryParameter()\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined\r\n        })\r\n    };\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj Zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react';\r\nimport Container from \"../../../common/Container\"\r\nimport Header from \"../../../common/Header\"\r\nimport Section from \"../../../common/Section\"\r\nimport TopButton from \"./TopButton\"\r\nimport Form from \"./Form\"\r\nimport ListButtons from \"./ListButtons\"\r\nimport TasksList from \"./TasksList\"\r\nimport Search from './Search';\r\n\r\nconst TasksPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Lista zadań\"\r\n            />\r\n            <Section\r\n                title=\"Dodaj nowe zadanie\"\r\n                body={<Form />}\r\n                extraHeaderContent={\r\n                    <TopButton\r\n                    />}\r\n            />\r\n            <Section\r\n                title=\"Wyszukiwarka\"\r\n                body={<Search />}\r\n            />\r\n            <Section\r\n                title=\"Lista zadań\"\r\n                body={\r\n                    <TasksList\r\n                    />}\r\n                extraHeaderContent={\r\n                    <ListButtons\r\n                    />}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\nexport default TasksPage;\r\n","import styled, { css } from \"styled-components\"\r\n\r\nexport const Form = styled.form`\r\n    margin: 10px;\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: 1fr 4fr 1fr;\r\n    align-items: center;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\n\r\nexport const Text = styled.p`\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    display: inline-block;\r\n    padding: 10px;\r\n    margin: 10px;\r\n`\r\n\r\nexport const ContentText = styled.p`\r\n    display: inline-block;\r\n`\r\n\r\nexport const LabelText = styled.p`\r\n    font-weight: bold;\r\n    display: inline-block;\r\n`\r\n\r\nexport const ButtonContainer = styled.section`\r\n    margin: 20px;\r\n    padding: 10px;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(30%, 1fr));;\r\n    grid-gap: 15px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\nexport const Button = styled.button`\r\n    padding: 20px;\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    font-weight: bold;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n    \r\n    &:active {\r\n        filter: brightness(115%);\r\n    }\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n\r\n    ${({ save }) => save && css`\r\n    background-color: ${({ theme }) => theme.color.orange};\r\n    padding: 10px;\r\n    `}\r\n\r\n    ${({ done }) => done && css`\r\n    background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ edit }) => edit && css`\r\n    background-color: ${({ theme }) => theme.color.teal}\r\n    `}\r\n`","import React from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport {\r\n    getTaskById,\r\n    toggleTaskDone,\r\n    removeTask,\r\n} from \"../../tasksSlice\"\r\nimport { useEditedTaskContent } from \"../../useEditedTaskContent\"\r\nimport {\r\n    ButtonContainer,\r\n    Button,\r\n    Text,\r\n    ContentText,\r\n    LabelText,\r\n    Form\r\n} from \"./styled\"\r\nimport Input from \"../../TasksPage/Input\"\r\n\r\nconst TaskPageBody = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id))\r\n    const dispatch = useDispatch()\r\n    const {\r\n        editedTaskContent,\r\n        setEditedTaskContent,\r\n        onClickTaskEdition,\r\n        onFormSubmit\r\n    } = useEditedTaskContent()\r\n\r\n    return task && (\r\n        <section>\r\n            <Form\r\n                onSubmit={(event) => onFormSubmit(event, task.id)}\r\n            >\r\n                <LabelText>\r\n                    Zadanie:\r\n                </LabelText>\r\n\r\n                {task.inEdition ? (\r\n                    <Input\r\n                        value={editedTaskContent}\r\n                        onChange={({ target }) => setEditedTaskContent(target.value)}\r\n                    />\r\n                ) : (\r\n                        <ContentText>\r\n                            {task.content}\r\n                        </ContentText>\r\n                    )}\r\n                <Button\r\n                    save\r\n                    hidden={task.inEdition ? false : true}\r\n                >\r\n                    Zapisz zmiany\r\n            </Button>\r\n            </Form>\r\n            <Text>\r\n                {task ? `Ukończone : ${task.done ? \"Tak\" : \"Nie\"}` : \"\"}\r\n            </Text>\r\n            <ButtonContainer>\r\n\r\n                <Button\r\n                    done\r\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                >\r\n                    Oznacz jako {task.done ? \"nie\" : \"\"}wykonane\r\n            </Button>\r\n                <Button\r\n                    remove\r\n                    onClick={() => dispatch(removeTask(task.id, 1))}\r\n                >\r\n                    Usuń\r\n            </Button>\r\n                <Button\r\n                    edit\r\n                    onClick={() => onClickTaskEdition(task.id, task.content)}\r\n                >\r\n                    {task.inEdition ? \"Resetuj\" : \"Edytuj\"}\r\n                </Button>\r\n            </ButtonContainer>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TaskPageBody","import React from \"react\"\r\nimport Container from \"../../../common/Container\"\r\nimport Header from \"../../../common/Header\"\r\nimport Section from \"../../../common/Section\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { getTaskById } from \"../tasksSlice\"\r\nimport TaskPageBody from \"./TaskPageBody\"\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id))\r\n\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={task ? <TaskPageBody /> : <section></section>}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TaskPage\r\n","import React from \"react\"\r\nimport Container from \"../../common/Container\"\r\nimport Header from \"../../common/Header\"\r\nimport Section from \"../../common/Section\"\r\n\r\nconst Author = () =>\r\n    <Container>\r\n        <Header\r\n            title=\"O Autorze\" />\r\n        <Section\r\n            title=\"Paweł Feszler\"\r\n            body={\r\n                <section>\r\n                    <p>\r\n                        Od początku tego roku poświęcam również czas na naukę programowania.\r\n                        Mój główny zakres zainteresowań w tej kwestii to technologie front-endowe ze szczególnym wskazaniem na javascript es6 oraz react.\r\n                        Obecnie uczestniczę w kursie \"Frontend developer od podstaw\" na https://youcode.pl/ oraz uczę się samodzielnie\r\n                    </p>\r\n                    <p>\r\n                        Link do profilu github:<br />\r\n                        https://github.com/Pfeszler/\r\n                    </p>\r\n                    <p>Od lat, z sukcesami, pracuję w sprzedaży. Największe doświadczenie mam w branży telekomunikacyjnej.</p>\r\n                </section>\r\n            }\r\n        />\r\n    </Container>\r\nexport default Author","import styled from \"styled-components\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nconst activeClassName = \"active\"\r\n\r\nexport const StyledNav = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    padding: 10px;\r\n    list-style: none;\r\n    font-size: 20px;\r\n`\r\n\r\nexport const NavItems = styled.li`\r\n    margin: 20px 30px;\r\n    padding: 2px 0;\r\n    border-bottom: 2px solid transparent;\r\n    transition: 0.3s;\r\n        &:hover{\r\n            border-bottom: 2px solid ${({ theme }) => theme.color.white};\r\n        }\r\n       \r\n`\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(props => ({\r\n    activeClassName\r\n}))`\r\n    color: ${({ theme }) => theme.color.white};\r\n    text-decoration: none;\r\n       \r\n        &.${activeClassName} {\r\n         color: ${({ theme }) => theme.color.white};\r\n         font-weight: bold;\r\n        }`","import React from \"react\"\r\nimport { HashRouter, Switch, Route, Redirect, } from \"react-router-dom\"\r\nimport TasksPage from \"./features/tasks/TasksPage\"\r\nimport TaskPage from \"./features/tasks/TaskPage\"\r\nimport Author from \"./features/author\"\r\nimport { StyledNavLink, StyledNav, NavItems } from \"./common/NavigationStyles\"\r\n\r\n\r\n\r\n\r\nconst App = () => \r\n        <HashRouter>\r\n            <nav>\r\n                <StyledNav>\r\n                    <NavItems>\r\n                        <StyledNavLink\r\n                            to=\"/zadania\"\r\n                        >\r\n                            Zadania\r\n                    </StyledNavLink>\r\n                    </NavItems>\r\n                    <NavItems>\r\n                        <StyledNavLink\r\n                            to=\"/oAutorze\"\r\n                        >\r\n                            o Autorze\r\n                    </StyledNavLink>\r\n                    </NavItems>\r\n                </StyledNav>\r\n                <Switch>\r\n                    <Route\r\n                        path=\"/zadania/:id\"\r\n                    >\r\n                        <TaskPage />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/zadania\"\r\n                    >\r\n                        <TasksPage />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/oAutorze\"\r\n                    >\r\n                        <Author />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/\"\r\n                    >\r\n                        <Redirect\r\n                            to=\"/zadania\"\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </nav>\r\n        </HashRouter>\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const theme = {\r\n    color: {\r\n        gray: \"#eee\",\r\n        teal: \"#006666\",\r\n        silver: \"#ddd\",\r\n        white: \"#fff\",\r\n        green: \"#008000\",\r\n        red: \"#FF0000\",\r\n        orange: \"#FFA500\"\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        tabletMax: 991\r\n    }\r\n}","export const getExampleTasks = async ()  => {\r\n    const response =  await fetch(\"exampleTasks.JSON\")\r\n\r\n    if (!response.ok) {\r\n        new Error (response.statusText)\r\n    }\r\n    return await response.json()\r\n}","import { takeEvery, call, put, select, delay, takeLatest } from \"redux-saga/effects\"\r\nimport { fetchExampleTasks, setTasks, selectTasks, selectHideDone, setLoadingStatus, toggleHideDone } from \"./tasksSlice\"\r\nimport { getExampleTasks } from \"./getExampleTasks\"\r\nimport { saveToLocalStorage } from \"./localStorage/localStorage\"\r\nimport {tasksKey, hideDoneKey} from \"./localStorage/localStorageKeys\"\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setLoadingStatus(\"loading\"))\r\n        yield delay(1000)\r\n        const exampleTasks = yield call(getExampleTasks)\r\n        yield put(setTasks(exampleTasks))\r\n        yield put(setLoadingStatus(\"success\"))\r\n    } catch (error) {\r\n        yield put(setLoadingStatus(\"failed\"))\r\n        yield call(alert(\"coś poszło nie tak\"))\r\n    }\r\n}\r\n\r\nfunction* saveTasksToLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks)\r\n    yield call(saveToLocalStorage, tasksKey, tasks)\r\n}\r\n\r\nfunction* saveHideDoneToLocalStorageHandler() {\r\n    const hideDone = yield select(selectHideDone)\r\n    yield call(saveToLocalStorage, hideDoneKey, hideDone)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler )\r\n    yield takeEvery(\"*\", saveTasksToLocalStorageHandler)\r\n    yield takeLatest(toggleHideDone.type, saveHideDoneToLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\"\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga()\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport tasksReducer from \"./features/tasks/tasksSlice\"\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport rootSaga from \"./rootSaga\"\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        listInformation: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GlobalStyle } from \"./GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport { Provider } from \"react-redux\"\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\"\r\nimport store from \"./store\"\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}