{"version":3,"sources":["Container/index.js","Header/index.js","Section/index.js","Form/index.js","Buttons/index.js","Tasks/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","title","Section","body","extraHeaderContent","Form","placeholder","Buttons","props","tasksNotDoneLength","tasks","filter","done","length","hideDone","disabled","Tasks","map","task","content","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAUeA,G,UANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,0BAAMC,UAAU,aACXD,KCIME,G,MANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,4BAAQF,UAAU,UACd,wBAAIA,UAAU,iBAAiBE,MCUxBC,G,MAbC,SAAC,GAAD,IAAED,EAAF,EAAEA,MAAOE,EAAT,EAASA,KAAMC,EAAf,EAAeA,mBAAf,OACX,6BAASL,UAAU,WAChB,yBAAKA,UAAU,4BACX,wBAAIA,UAAU,mBAAmBE,GAChCG,GAEL,yBAAKL,UAAU,iBACVI,MCCEE,G,MAPF,kBAEL,0BAAMN,UAAU,cACZ,2BAAOA,UAAU,cAAcO,YAAY,0BAC3C,4BAAQP,UAAU,gBAAlB,oBCOGQ,G,MAZC,SAACC,GACb,IAAMC,EAAqBD,EAAME,MAAMC,QAAO,qBAAGC,QAAkBC,OACnE,OAAOL,EAAME,MAAMG,OAAS,GAAM,yBAAKd,UAAU,4BAC7C,4BAAQA,UAAU,yBACbS,EAAMM,SAAW,4BAAoB,wBAE1C,4BAAQf,UAAU,wBAAwBgB,WAAUN,EAAqB,IAAzE,4BCeOO,G,MApBD,SAACR,GAAD,OAEV,wBAAIT,UAAU,eACTS,EAAME,MAAMO,KAAI,SAAAC,GAAI,OACjB,wBACInB,UAAS,sBAAiBmB,EAAKN,MAAQJ,EAAMM,SAAW,qBAAuB,GAAtE,MACT,4BAAQf,UAAU,2CACbmB,EAAKN,KAAO,eAAO,IAExB,0BAAMb,UAAS,qBAAgBmB,EAAKN,KAAO,qBAAuB,KAC7DM,EAAKC,SAEV,4BAAQpB,UAAU,uDAAlB,6BCHVW,EAAQ,CAAC,CAAEU,GAAI,EAAGD,QAAS,oBAAqBP,MAAM,GAAS,CAAEQ,GAAI,EAAGD,QAAS,oBAAqBP,MAAM,IAuBnGS,MAlBf,WACI,OACI,yBAAKtB,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAQE,MAAM,qBACd,kBAAC,EAAD,CACIA,MAAM,qBACNE,KAAM,kBAAC,EAAD,QACV,kBAAC,EAAD,CACIF,MAAM,mBACNE,KAAM,kBAAC,EAAD,CAAOO,MAAOA,EAAOI,UAb9B,IAcGV,mBAAoB,kBAAC,EAAD,CAASM,MAAOA,EAAOI,UAd9C,SCHGQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3cb2490.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n)\r\n\r\nexport default Container","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) =>\r\n    (<section className=\"section\">\r\n        <div className=\"section__headerContainer\">\r\n            <h2 className=\"section__header\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n\r\n    </section>)\r\n\r\n\r\nexport default Section","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nconst Form = () =>\r\n    (\r\n        <form className=\"form__form\">\r\n            <input className=\"form__input\" placeholder=\"Co jest do zrobienia?\" />\r\n            <button className=\"form__button\">Dodaj Zadanie</button>\r\n        </form>\r\n    );\r\nexport default Form\r\n\r\n\r\n","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Buttons = (props) => {\r\n    const tasksNotDoneLength = props.tasks.filter(({ done }) => !done).length\r\n    return props.tasks.length > 0 && (<div className=\"buttons__buttonContainer\">\r\n        <button className=\"buttons__headerButton\">\r\n            {props.hideDone ? \"Poka≈º uko≈Ñczone\" : \"Ukryj Uko≈Ñczone\"}\r\n        </button>\r\n        <button className=\"buttons__headerButton\" disabled={tasksNotDoneLength > 0 ? false : true }>\r\n            Uko≈Ñcz wszystkie\r\n            </button>\r\n    </div>\r\n    )\r\n}\r\nexport default Buttons","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Tasks = (props) => (\r\n\r\n    <ul className=\"tasks__list\">\r\n        {props.tasks.map(task => (\r\n            <li\r\n                className={`tasks__item ${task.done && props.hideDone ? \"task__item--hidden\" : \"\"} `}>\r\n                <button className=\"tasks__button tasks__button--toggleDone\">\r\n                    {task.done ? \"‚úîÔ∏è\" : \"\"}\r\n                </button>\r\n                <span className={`tasks__text${task.done ? \" tasks__text--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button className=\"tasks__button tasks__button--remove js-removeButton\">\r\n                    üóëÔ∏è\r\n        </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nexport default Tasks","import React from 'react';\r\nimport Container from \"./Container\"\r\nimport Header from \"./Header\"\r\nimport Section from \"./Section\"\r\nimport Form from \"./Form\"\r\nimport Buttons from \"./Buttons\"\r\nimport Tasks from \"./Tasks\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst tasks = [{ id: 1, content: \"example content 1\", done: false }, { id: 2, content: \"example content 2\", done: true }]\r\n\r\nconst hideDone = false;\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Header title=\"Lista zada≈Ñ\" />\r\n                <Section\r\n                    title=\"Dodaj nowe zadanie\"\r\n                    body={<Form />} />\r\n                <Section\r\n                    title=\"Lista zada≈Ñ\"\r\n                    body={<Tasks tasks={tasks} hideDone={hideDone} />}\r\n                    extraHeaderContent={<Buttons tasks={tasks} hideDone={hideDone} />} />\r\n\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}