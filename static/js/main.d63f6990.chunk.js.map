{"version":3,"sources":["Container/index.js","Header/index.js","Section/index.js","Form/index.js","Buttons/index.js","Tasks/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","title","Section","body","extraHeaderContent","Form","addNewTask","useState","newTaskContent","setNewTaskContent","onSubmit","event","preventDefault","trim","placeholder","value","onChange","target","Buttons","tasks","hideDone","toggleHideDone","setAllDone","tasksNotDoneLength","filter","done","length","onClick","disabled","Tasks","removeTask","toggleTaskDone","map","task","key","id","content","App","setHideDone","setTasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d63f6990.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n)\r\n\r\nexport default Container","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\nconst Header = ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Section = ({title, body, extraHeaderContent}) =>\r\n    (<section className=\"section\">\r\n        <div className=\"section__headerContainer\">\r\n            <h2 className=\"section__header\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </div>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n\r\n    </section>)\r\n\r\n\r\nexport default Section","import React, { useState } from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nconst Form = ({addNewTask}) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\nconst onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    addNewTask(newTaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n}\r\n\r\n    return (\r\n        <form className=\"form__form\"\r\n        onSubmit={onFormSubmit}>\r\n            <input className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)} />\r\n            <button className=\"form__button\">Dodaj Zadanie</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n    const tasksNotDoneLength = tasks.filter(({ done }) => !done).length\r\n    return tasks.length > 0 && (<div className=\"buttons__buttonContainer\">\r\n        <button className=\"buttons__headerButton\" onClick={toggleHideDone}>\r\n            {hideDone ? \"Poka≈º uko≈Ñczone\" : \"Ukryj Uko≈Ñczone\"}\r\n        </button>\r\n        <button className=\"buttons__headerButton\"\r\n            disabled={tasksNotDoneLength > 0 ? false : true}\r\n            onClick={setAllDone}>\r\n            Uko≈Ñcz wszystkie\r\n            </button>\r\n    </div>\r\n    )\r\n}\r\nexport default Buttons","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\n\r\n\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n    return (<ul className=\"tasks__list\">\r\n        {tasks.map(task => (\r\n            <li key={task.id}\r\n                className={`tasks__item ${task.done && hideDone ? \"task__item--hidden\" : \"\"} `}>\r\n                <button\r\n                    className=\"tasks__button tasks__button--toggleDone\"\r\n                    onClick={() => toggleTaskDone(task.id)} >\r\n                    {task.done ? \"‚úîÔ∏è\" : \"\"}\r\n                </button>\r\n                <span className={`tasks__text${task.done ? \" tasks__text--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"tasks__button tasks__button--remove js-removeButton\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    üóëÔ∏è\r\n   </button>\r\n            </li>\r\n        ))}\r\n\r\n    </ul>\r\n    )\r\n};\r\n\r\n\r\nexport default Tasks","import React, { useState } from 'react';\r\nimport Container from \"./Container\"\r\nimport Header from \"./Header\"\r\nimport Section from \"./Section\"\r\nimport Form from \"./Form\"\r\nimport Buttons from \"./Buttons\"\r\nimport Tasks from \"./Tasks\"\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n    const [hideDone, setHideDone] = useState(false);\r\n\r\n    const toggleHideDone = () => {\r\n        setHideDone(hideDone => !hideDone)\r\n    };\r\n\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id))\r\n    }\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => (\r\n            { ...task, done: true })\r\n        ));\r\n    }\r\n\r\n    const addNewTask = (newTaskContent) => {\r\n        setTasks(tasks =>\r\n            [...tasks,\r\n            {\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n                content: newTaskContent,\r\n                done: false\r\n            }]);\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Header\r\n                    title=\"Lista zada≈Ñ\" />\r\n                <Section\r\n                    title=\"Dodaj nowe zadanie\"\r\n                    body={<Form\r\n                        addNewTask={addNewTask} />} />\r\n                <Section\r\n                    title=\"Lista zada≈Ñ\"\r\n                    body={<Tasks\r\n                        tasks={tasks}\r\n                        hideDone={hideDone}\r\n                        removeTask={removeTask}\r\n                        toggleTaskDone={toggleTaskDone} />}\r\n                    extraHeaderContent={<Buttons\r\n                        tasks={tasks}\r\n                        hideDone={hideDone}\r\n                        toggleHideDone={toggleHideDone}\r\n                        setAllDone={setAllDone} />} />\r\n\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}