{"version":3,"sources":["GlobalStyles.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/Tasks/tasksSlice.js","features/tasks/Tasks/Form/styled.js","features/tasks/Tasks/Form/index.js","features/tasks/Tasks/Buttons/styled.js","features/tasks/Tasks/Buttons/index.js","features/tasks/Tasks/TasksList/styled.js","features/tasks/Tasks/TasksList/index.js","features/tasks/Tasks/index.js","App.js","serviceWorker.js","theme.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gray","StyledContainer","styled","main","breakpoint","tabletMax","Container","children","StyledHeader","header","Title","h1","Header","title","className","StyledSection","section","white","HeaderContainer","div","mobileMax","h2","Section","body","extraHeaderContent","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","forEach","actions","selectTasks","StyledForm","form","Input","input","silver","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","trimmedNewTaskContent","trim","dispatch","useDispatch","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","content","nanoid","ref","placeholder","value","onChange","target","ButtonContainer","HeaderButton","Buttons","useSelector","tasksNotDoneLength","filter","length","onClick","disabled","List","ul","Item","li","hidden","css","Text","span","toggleDone","green","remove","red","TasksList","map","key","Tasks","App","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2hBAEO,IAAMA,EAAcC,YAAH,KAUI,qBAAGC,MAAkBC,MAAMC,Q,2LCVhD,IAAMC,EAAkBC,IAAOC,KAAV,KAGH,qBAAGL,MAAkBM,WAAWC,aCK1CC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAACN,EAAD,KACKM,I,iNCJF,IAAMC,EAAeN,IAAOO,OAAV,KAIZC,EAAQR,IAAOS,GAAV,KCQHC,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACL,EAAD,CACIM,UAAU,UAEV,kBAACJ,EAAD,KACKG,K,mlBCPN,IAAME,EAAgBb,IAAOc,QAAV,KACF,qBAAGlB,MAAkBC,MAAMkB,SAKtCC,EAAkBhB,IAAOiB,IAAV,KAMH,qBAAGrB,MAAkBM,WAAWgB,aAM5CR,EAASV,IAAOmB,GAAV,KCAJC,EAhBC,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,kBAACT,EAAD,KACI,kBAACG,EAAD,KACI,kBAAC,EAAD,KACKL,GAEJW,GAEL,6BACKD,K,eCXPE,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVC,MAAO,GACPC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAA6B,IAA1BH,EAAyB,EAAzBA,MAAWI,EAAc,EAAdA,QACnBJ,EAAMK,KAAKD,IAEfE,eAAgB,SAAAC,GACZA,EAAMN,UAAYM,EAAMN,UAE5BO,eAAgB,SAACD,EAAOE,GACpB,IAAMC,EAAQH,EAAMP,MAAMW,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOL,WAC/DG,EAAMP,MAAMU,GAAOI,MAAQP,EAAMP,MAAMU,GAAOI,MAElDC,WAAY,SAACR,EAAOE,GAChB,IAAMC,EAAQH,EAAMP,MAAMW,WAAU,SAAAC,GAAI,OAAIA,EAAKC,KAAOJ,EAAOL,WAC/DG,EAAMP,MAAMgB,OAAON,EAAO,IAE9BO,WAAY,SAAAV,GACRA,EAAMP,MAAMkB,SAAQ,SAACN,GACjBA,EAAKE,MAAO,S,EAOuDlB,EAAWuB,QAA/EhB,E,EAAAA,QAASG,E,EAAAA,eAAgBE,E,EAAAA,eAAgBO,E,EAAAA,WAAYE,E,EAAAA,WACvDG,EAAc,SAAAb,GAAK,OAAIA,EAAMP,OAC3BJ,IAAf,Q,09BC/BO,IAAMyB,EAAahD,IAAOiD,KAAV,KAIE,qBAAGrD,MAAkBM,WAAWC,aAK5C+C,EAAQlD,IAAOmD,MAAV,KAMY,qBAAGvD,MAAkBC,MAAMuD,UAEhC,qBAAGxD,MAAkBM,WAAWC,aAK5CkD,EAASrD,IAAOsD,OAAV,KAIK,qBAAG1D,MAAkBC,MAAM0D,QACtC,qBAAG3D,MAAkBC,MAAMkB,SAcf,qBAAGnB,MAAkBM,WAAWC,aCC1CqD,EAvCF,WAAO,IAAD,EAE6BC,mBAAS,IAFtC,mBAERC,EAFQ,KAEQC,EAFR,KAGTC,EAAwBF,EAAeG,OACvCC,EAAWC,cAaXC,EAAWC,iBAAO,MAClBC,EAAa,WACfF,EAASG,QAAQC,SAGrB,OACI,kBAACpB,EAAD,CACIqB,SAnBa,SAACC,GAClBA,EAAMC,iBACwB,KAA1BX,GACAE,EAAShC,EAAQ,CACb0C,QAASZ,EACTnB,MAAM,EACND,GAAIiC,iBAGZd,EAAkB,IAClBO,MAWI,kBAAChB,EAAD,CACIwB,IAAKV,EACLW,YAAY,wBACZC,MAAOlB,EACPmB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnB,EAAkBmB,EAAOF,UAEvD,kBAACvB,EAAD,wB,4kBCpCL,IAAM0B,EAAkB/E,IAAOiB,IAAV,KACH,qBAAGrB,MAAkBM,WAAWgB,aAM5C8D,EAAehF,IAAOsD,OAAV,KAIZ,qBAAG1D,MAAkBC,MAAM0D,QAYvB,qBAAG3D,MAAkBC,MAAMC,QAGnB,qBAAGF,MAAkBM,WAAWgB,aCD1C+D,EAtBC,WAAO,IAAD,EAEUC,YAAYnC,GAAhCpB,EAFU,EAEVA,MAAOC,EAFG,EAEHA,SACTkC,EAAWC,cACXoB,EAAqBxD,EAAMyD,QAAO,qBAAG3C,QAAkB4C,OAE7D,OAAO1D,EAAM0D,OAAS,GAClB,kBAACN,EAAD,KACI,kBAACC,EAAD,CACIM,QAAS,kBAAMxB,EAAS7B,OAEvBL,EAAW,4BAAoB,wBAEpC,kBAACoD,EAAD,CACIO,WAAUJ,EAAqB,GAC/BG,QAAS,kBAAMxB,EAASlB,OAF5B,2B,i8CChBL,IAAM4C,GAAOxF,IAAOyF,GAAV,MAIQ,qBAAG7F,MAAkBM,WAAWC,aAK5CuF,GAAO1F,IAAO2F,GAAV,MACc,qBAAG/F,MAAkBC,MAAMuD,UAOpD,qBAAGwC,QAAuBC,YAAJ,SAGH,qBAAGjG,MAAkBM,WAAWC,aAO5C2F,GAAO9F,IAAO+F,KAAV,MAKX,qBAAGtD,MAAmBoD,YAAJ,QAKXxC,GAASrD,IAAOsD,OAAV,KASb,qBAAG0C,YAA+BH,YAAJ,KACR,qBAAGjG,MAAkBC,MAAMoG,YAGjD,qBAAGC,QAAuBL,YAAJ,KACA,qBAAGjG,MAAkBC,MAAMsG,UCRxCC,GAtCG,WAAO,IAAD,EAEQlB,YAAYnC,GAAhCpB,EAFY,EAEZA,MAAOC,EAFK,EAELA,SAETkC,EAAWC,cAEjB,OACI,kBAACyB,GAAD,KACK7D,EAAM0E,KAAI,SAAA9D,GAAI,OACX,kBAACmD,GAAD,CACIY,IAAK/D,EAAKC,GACVoD,UAAQrD,EAAKE,OAAQb,IAErB,kBAAC,GAAD,CACIoE,YAAU,EACVV,QAAS,kBAAMxB,EAAS3B,EAAeI,EAAKC,OAE3CD,EAAKE,KAAO,eAAO,IAExB,kBAACqD,GAAD,CACIrD,OAAMF,EAAKE,MAEVF,EAAKiC,SAEV,kBAAC,GAAD,CACI0B,QAAM,EACNZ,QAAS,kBAAMxB,EAASpB,EAAWH,EAAKC,GAAI,MAFhD,4BCCL+D,OAxBf,WAEI,OACI,yBAAK3F,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,CACID,MAAM,qBACV,kBAAC,EAAD,CACIA,MAAM,qBACNU,KAAM,kBAAC,EAAD,QAEV,kBAAC,EAAD,CACIV,MAAM,mBACNU,KACI,kBAAC,GAAD,MAEJC,mBACI,kBAAC,EAAD,WClBTkF,GAJH,kBACR,kBAAC,GAAD,OCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,ICGQC,eAAe,CAC1BC,QAAS,CACLpF,MAAOqF,KCMfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,IAAD,CAAexH,MFdA,CACjBC,MAAO,CACHC,KAAM,OACNyD,KAAM,UACNH,OAAQ,OACRrC,MAAO,OACPkF,MAAO,UACPE,IAAK,WAGTjG,WAAY,CACRgB,UAAW,IACXf,UAAW,OEGX,kBAACT,EAAD,MACA,kBAAC,GAAD,SAIN2H,SAASC,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.899d9000.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gray};\r\n        font-family: 'Montserrat', sans-serif;\r\n        word-break: break-all;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 0 15px;\r\n    }\r\n`","import React from \"react\"\r\nimport {StyledContainer} from \"./styled\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n)\r\n\r\nexport default Container","import styled from \"styled-components\"\r\n\r\nexport const StyledHeader = styled.header`\r\n    padding: 40px 0 20px 0;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 35px;\r\n    margin: 0;\r\n`","import React from \"react\"\r\nimport {StyledHeader, Title} from \"./styled\"\r\n\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader\r\n        className=\"header\"\r\n    >\r\n        <Title>\r\n            {title}\r\n        </Title>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header","import styled from \"styled-components\"\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-bottom: 10px;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n    padding: 25px;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-wrap: wrap;\r\n        flex-direction: column;\r\n}\r\n`\r\n\r\nexport const Header = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n`\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { StyledSection, HeaderContainer, Header } from \"./styled\"\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        <div>\r\n            {body}\r\n        </div>\r\n\r\n    </StyledSection>\r\n)\r\n\r\n\r\nexport default Section","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(index, 1)\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach((task) => {\r\n                task.done = true;\r\n            });\r\n        }\r\n    },\r\n}\r\n)\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks\r\nexport default tasksSlice.reducer\r\n\r\n","\r\nimport styled from \"styled-components\"\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 10px 25px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nexport const Input = styled.input`\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    margin-left: 0px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 2px ${({ theme }) => theme.color.silver};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 20%;\r\n    align-self: center;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        min-width: 230px;\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\"\r\nimport { nanoid } from \"@reduxjs/toolkit\"\r\nimport { addTask } from \"../tasksSlice\"\r\nimport { StyledForm, Button, Input } from \"./styled\"\r\n\r\nconst Form = () => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const trimmedNewTaskContent = newTaskContent.trim()\r\n    const dispatch = useDispatch()\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid()\r\n            }))\r\n        };\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n    const inputRef = useRef(null)\r\n    const focusInput = () => {\r\n        inputRef.current.focus()\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>\r\n                Dodaj Zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import styled from \"styled-components\"\r\n\r\nexport const ButtonContainer = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const HeaderButton = styled.button`\r\n    border: none;\r\n    padding: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.gray}\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-top: 30px\r\n    }\r\n`","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { ButtonContainer, HeaderButton } from \"./styled\"\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\"\r\n\r\nconst Buttons = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch()\r\n    const tasksNotDoneLength = tasks.filter(({ done }) => !done).length\r\n\r\n    return tasks.length > 0 && (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n            </HeaderButton>\r\n            <HeaderButton\r\n                disabled={tasksNotDoneLength > 0 ? false : true}\r\n                onClick={() => dispatch(setAllDone())}\r\n            >\r\n                Ukończ wszystkie\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\nexport default Buttons","import styled, { css } from \"styled-components\"\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        padding: 5px;\r\n    }\r\n`\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    display: flex;\r\n    padding: 10px;\r\n    margin: 20px 10px;\r\n    line-height: 1.5em;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px 0;\r\n        padding: 0;\r\n        padding-bottom: 10px\r\n    }\r\n`\r\n\r\nexport const Text = styled.span`\r\n    flex-basis: 100%;\r\n    flex-shrink: 1;\r\n    margin: 0 20px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    outline: none;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n\r\n    &:active {\r\n            filter: brightness(120%)\r\n        }\r\n`","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { List, Item, Text, Button } from \"./styled\"\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\n\r\nconst TasksList = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectTasks)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone ? true : false}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    <Text\r\n                        done={task.done ? true : false}\r\n                    >\r\n                        {task.content}\r\n                    </Text>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id, 1))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n};\r\n\r\n\r\nexport default TasksList","import React from 'react';\r\nimport Container from \"../../../common/Container\"\r\nimport Header from \"../../../common/Header\"\r\nimport Section from \"../../../common/Section\"\r\nimport Form from \"./Form\"\r\nimport Buttons from \"./Buttons\"\r\nimport TasksList from \"./TasksList\"\r\n\r\nfunction Tasks() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Header\r\n                    title=\"Lista zadań\" />\r\n                <Section\r\n                    title=\"Dodaj nowe zadanie\"\r\n                    body={<Form />}\r\n                />\r\n                <Section\r\n                    title=\"Lista zadań\"\r\n                    body={\r\n                        <TasksList\r\n                        />}\r\n                    extraHeaderContent={\r\n                        <Buttons\r\n                        />}\r\n                />\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\nexport default Tasks;\r\n","import React from \"react\"\r\nimport Tasks from \"./features/tasks/Tasks\"\r\n\r\nconst App = () => (\r\n    <Tasks />\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const theme = {\r\n    color: {\r\n        gray: \"#eee\",\r\n        teal: \"#006666\",\r\n        silver: \"#ddd\",\r\n        white: \"#fff\",\r\n        green: \"#008000\",\r\n        red: \"#FF0000\"\r\n        \r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        tabletMax: 991\r\n    }\r\n}","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport tasksReducer from \"./features/tasks/Tasks/tasksSlice\"\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GlobalStyle } from \"./GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport { Provider } from \"react-redux\"\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\"\r\nimport store from \"./store\"\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}