{"version":3,"sources":["GlobalStyles.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/headerButtonsStyles/index.js","features/tasks/TasksPage/TopButton/index.js","features/tasks/TasksPage/TopButton/useLoadingStatus.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/ListButtons/index.js","features/tasks/TasksPage/queryHooks/useQueryParameter.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/queryHooks/searchQueryParamName.js","features/tasks/TasksPage/queryHooks/useReplaceQueryParameter.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/index.js","common/NavigationStyles/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gray","StyledContainer","styled","main","breakpoint","tabletMax","Container","children","StyledHeader","header","Title","h1","Header","title","className","StyledSection","section","white","HeaderContainer","div","mobileMax","h2","Body","Section","body","extraHeaderContent","saveTasksToLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loadingStatus","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","setLoadingStatus","fetchExampleTasks","setTasks","exampleTasks","actions","selectListInformation","listInformation","selectTasks","selectHideDone","selectLoadingStatus","selectTasksLength","length","selectTaskNotDoneLength","filter","ButtonContainer","HeaderButton","button","teal","invisible","css","TopButton","dispatch","useDispatch","useSelector","loadingText","loading","failed","useLoadingStatus","disabled","onClick","StyledForm","form","Button","Input","input","silver","Form","useState","newTaskContent","setNewTaskContent","trimmedNewTaskContent","trim","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","content","nanoid","ref","placeholder","value","onChange","target","ListButtons","tasksNotDoneLength","tasksLength","useQueryParameter","parameter","location","useLocation","URLSearchParams","search","get","List","ul","Item","li","hidden","Text","span","StyledLink","Link","toggleDone","green","remove","red","TasksList","query","toUpperCase","includes","selectTasksByQuery","map","key","to","useReplaceQueryParameter","history","useHistory","searchParams","set","delete","replace","pathname","toString","Wrapper","Search","replaceQueryParameter","undefined","TasksPage","TaskPage","useParams","taskId","find","getTaskById","Author","StyledNav","NavItems","StyledNavLink","NavLink","attrs","props","activeClassName","App","path","Boolean","window","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksToLocalStorageHandler","tasksSaga","put","delay","call","alert","select","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b47a9699.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gray};\r\n        font-family: 'Montserrat', sans-serif;\r\n        word-break: break-all;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 0 15px;\r\n    }\r\n`","import React from \"react\"\r\nimport {StyledContainer} from \"./styled\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n)\r\n\r\nexport default Container","import styled from \"styled-components\"\r\n\r\nexport const StyledHeader = styled.header`\r\n    padding: 40px 0 20px 0;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 35px;\r\n    margin: 0;\r\n`","import React from \"react\"\r\nimport {StyledHeader, Title} from \"./styled\"\r\n\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader\r\n        className=\"header\"\r\n    >\r\n        <Title>\r\n            {title}\r\n        </Title>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header","import styled from \"styled-components\"\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-bottom: 10px;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n    padding: 25px;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-wrap: wrap;\r\n        flex-direction: column;\r\n}\r\n`\r\n\r\nexport const Header = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n`\r\n\r\nexport const Body = styled.section`\r\n    padding: 10px 25px;\r\n`\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { StyledSection, HeaderContainer, Header, Body } from \"./styled\"\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n\r\n    </StyledSection>\r\n)\r\n\r\n\r\nexport default Section","const localStorageKey = \"tasks\"\r\n\r\nexport const saveTasksToLocalStorage = tasks => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks))\r\n}\r\n\r\nexport const getTasksFromLocalStorage = () =>  JSON.parse(localStorage.getItem(localStorageKey)) || []\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"listInformation\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loadingStatus: \"initial\",\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.splice(index, 1)\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach((task) => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        setLoadingStatus: (state, { payload }) => {\r\n            state.loadingStatus = payload\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: exampleTasks }) => {\r\n            state.tasks = exampleTasks\r\n        }\r\n    },\r\n}\r\n)\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    setLoadingStatus,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\n\r\n\r\nexport const selectListInformation = state => state.listInformation;\r\nexport const selectTasks = state => selectListInformation(state).tasks;\r\nexport const selectHideDone = state => selectListInformation(state).hideDone;\r\nexport const selectLoadingStatus = state => selectListInformation(state).loadingStatus\r\nexport const selectTasksLength = state => selectTasks(state).length;\r\nexport const selectTaskNotDoneLength = state => selectTasks(state).filter(({ done }) => !done).length;\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state)\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks\r\n    }\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.toUpperCase().trim()));\r\n};\r\n\r\nexport default tasksSlice.reducer\r\n\r\n","import styled, { css } from \"styled-components\"\r\n\r\nexport const ButtonContainer = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const HeaderButton = styled.button`\r\n    border: none;\r\n    padding: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.3s;\r\n\r\n    ${({ invisible }) => invisible && css`\r\n        display: none;\r\n    `\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.gray}\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-top: 30px\r\n    }\r\n`","import React from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { fetchExampleTasks } from \"../../tasksSlice\"\r\nimport { ButtonContainer, HeaderButton } from \"../headerButtonsStyles\"\r\nimport { useLoadingStatus } from \"./useLoadingStatus\"\r\n\r\nconst TopButton = () => {\r\n    const dispatch = useDispatch()\r\n    const {loadingText, loading, failed} = useLoadingStatus()\r\n    return (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                disabled={loading || failed? true : false}\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n            >\r\n                {loadingText()}\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default TopButton","import { useSelector } from \"react-redux\"\r\nimport { selectLoadingStatus } from \"../../tasksSlice\"\r\n\r\nexport const useLoadingStatus = () => {\r\n    const loadingStatus = useSelector(selectLoadingStatus);\r\n    const loading = loadingStatus === \"loading\" ? true : false\r\n    const failed = loadingStatus === \"failed\" ? true : false\r\n\r\n    const loadingText = () => {\r\n        switch (loadingStatus) {\r\n            case \"loading\":\r\n                return \"Ładowanie...\"\r\n            case \"failed\":\r\n                return \"Coś poszło nie tak, przeładuj stronę i spróbuj ponownie\"\r\n            default:\r\n                return \"Pobierz przykładowe zadania\"\r\n\r\n        }\r\n    }\r\n\r\n    return {loadingText, loading, failed}\r\n}","\r\nimport styled from \"styled-components\"\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 20%;\r\n    align-self: center;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        min-width: 230px;\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nconst  Input = styled.input`\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    margin-left: 0px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 2px ${({ theme }) => theme.color.silver};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px;\r\n    }\r\n`\r\n\r\nexport default Input","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\"\r\nimport { nanoid } from \"@reduxjs/toolkit\"\r\nimport { addTask } from \"../../tasksSlice\"\r\nimport { StyledForm, Button} from \"./styled\"\r\nimport Input from \"../Input\"\r\n\r\nconst Form = () => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const trimmedNewTaskContent = newTaskContent.trim()\r\n    const dispatch = useDispatch()\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid()\r\n            }))\r\n        };\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n    const inputRef = useRef(null)\r\n    const focusInput = () => {\r\n        inputRef.current.focus()\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>\r\n                Dodaj Zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { selectHideDone, toggleHideDone, setAllDone, selectTaskNotDoneLength, selectTasksLength } from \"../../tasksSlice\"\r\nimport { ButtonContainer, HeaderButton } from \"../headerButtonsStyles\"\r\n\r\nconst ListButtons = () => {\r\n\r\n    const hideDone  = useSelector(selectHideDone);\r\n    const tasksNotDoneLength = useSelector(selectTaskNotDoneLength)\r\n    const tasksLength = useSelector(selectTasksLength)\r\n    const dispatch = useDispatch()\r\n\r\n    return tasksLength > 0 && (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n            </HeaderButton>\r\n                <HeaderButton\r\n                disabled={tasksNotDoneLength > 0 ? false : true}\r\n                onClick={() => dispatch(setAllDone())}\r\n            >\r\n                Ukończ wszystkie\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\nexport default ListButtons","import {useLocation} from \"react-router-dom\"\r\n\r\nconst useQueryParameter = (parameter) =>  {\r\n    const location = useLocation()\r\n    return (new URLSearchParams(location.search)).get(parameter)\r\n}\r\n\r\nexport default useQueryParameter\r\n","import styled, { css } from \"styled-components\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 0px;\r\n\r\n`\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    display: flex;\r\n    margin: 30px 0px;\r\n    line-height: 1.5em;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 20px 0;\r\n    }\r\n`\r\n\r\nexport const Text = styled.span`\r\n    flex-basis: 100%;\r\n    flex-shrink: 1;\r\n    margin: 0 20px;\r\n`\r\n\r\nexport const StyledLink = styled(Link)`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    text-decoration: none;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n    \r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    outline: none;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n\r\n    &:active {\r\n            filter: brightness(120%)\r\n        }\r\n`","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport useQueryParameter  from \"../queryHooks/useQueryParameter\";\r\nimport searchQueryParamName from \"../queryHooks/searchQueryParamName\"\r\nimport { List, Item, Text, Button, StyledLink } from \"./styled\"\r\n\r\n\r\n\r\nconst TasksList = () => {\r\n    const query = useQueryParameter(searchQueryParamName)\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query))\r\n    const hideDone = useSelector(selectHideDone)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone ? true : false}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    <Text>\r\n                        <StyledLink\r\n                            to={`/zadania/${task.id}`}\r\n                            done={task.done ? true : false}\r\n                        >\r\n                          \r\n                                {task.content}\r\n        \r\n                        </StyledLink>\r\n                    </Text>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id, 1))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n};\r\n\r\n\r\nexport default TasksList","const searchQueryParamName = \"szukaj\"\r\n\r\nexport default searchQueryParamName","import { useLocation, useHistory } from \"react-router-dom\"\r\n\r\nconst useReplaceQueryParameter = () => {\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const searchParams = new URLSearchParams(location.search)\r\n    const setQueryValue = ({ key, value }) => {\r\n        if (!value) {\r\n            searchParams.delete(key)\r\n        } else {\r\n            searchParams.set(key, value)\r\n        }\r\n        history.replace(`${location.pathname}?${searchParams.toString()}`)\r\n    }\r\n    return setQueryValue\r\n};\r\n\r\nexport default useReplaceQueryParameter","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.section`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`","import React from \"react\"\r\nimport useQueryParameter from \"../queryHooks/useQueryParameter\";\r\nimport useReplaceQueryParameter from \"../queryHooks/useReplaceQueryParameter\"\r\nimport searchQueryParamName from \"../queryHooks/searchQueryParamName\"\r\nimport Input from \"../Input\"\r\nimport { Wrapper } from \"./styled\"\r\n\r\n\r\n\r\nconst Search = () => {\r\n    const query = useQueryParameter(searchQueryParamName)\r\n    const replaceQueryParameter = useReplaceQueryParameter()\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined\r\n        })\r\n    };\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj Zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default Search","import React from 'react';\r\nimport Container from \"../../../common/Container\"\r\nimport Header from \"../../../common/Header\"\r\nimport Section from \"../../../common/Section\"\r\nimport TopButton from \"./TopButton\"\r\nimport Form from \"./Form\"\r\nimport ListButtons from \"./ListButtons\"\r\nimport TasksList from \"./TasksList\"\r\nimport Search from './Search';\r\n\r\nconst TasksPage = () => {\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Lista zadań\"\r\n            />\r\n            <Section\r\n                title=\"Dodaj nowe zadanie\"\r\n                body={<Form />}\r\n                extraHeaderContent={\r\n                    <TopButton\r\n                    />}\r\n            />\r\n            <Section\r\n                title=\"Wyszukiwarka\"\r\n                body={<Search />}\r\n            />\r\n            <Section\r\n                title=\"Lista zadań\"\r\n                body={\r\n                    <TasksList\r\n                    />}\r\n                extraHeaderContent={\r\n                    <ListButtons\r\n                    />}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\nexport default TasksPage;\r\n","import React from \"react\"\r\nimport Container from \"../../../common/Container\"\r\nimport Header from \"../../../common/Header\"\r\nimport Section from \"../../../common/Section\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { getTaskById } from \"../tasksSlice\"\r\n\r\nconst TaskPage = () => {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id))\r\n    return (\r\n        <Container>\r\n            <Header\r\n                title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"nie znaleziono zadania\"}\r\n                body={\r\n                    <section>\r\n                        <strong>\r\n                            {task ? `Ukończone : ${task.done ? \"Tak\" : \"Nie\"}` : \"\"}\r\n                        </strong>\r\n                    </section>\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskPage\r\n","import React from \"react\"\r\nimport Container from \"../../common/Container\"\r\nimport Header from \"../../common/Header\"\r\nimport Section from \"../../common/Section\"\r\n\r\nconst Author = () =>\r\n    <Container>\r\n        <Header\r\n            title=\"O Autorze\" />\r\n        <Section\r\n            title=\"Paweł Feszler\"\r\n            body={\r\n                <section>\r\n                    <p>\r\n                        Od początku tego roku poświęcam również czas na naukę programowania.\r\n                        Mój główny zakres zainteresowań w tej kwestii to technologie front-endowe ze szczególnym wskazaniem na javascript es6 oraz react.\r\n                        Obecnie uczestniczę w kursie \"Frontend developer od podstaw\" na https://youcode.pl/ oraz uczę się samodzielnie\r\n                    </p>\r\n                    <p>\r\n                        Link do profilu github:<br />\r\n                        https://github.com/Pfeszler/\r\n                    </p>\r\n                    <p>Od lat, z sukcesami, pracuję w sprzedaży. Największe doświadczenie mam w branży telekomunikacyjnej.</p>\r\n                </section>\r\n            }\r\n        />\r\n    </Container>\r\nexport default Author","import styled from \"styled-components\"\r\nimport { NavLink } from \"react-router-dom\"\r\n\r\nconst activeClassName = \"active\"\r\n\r\nexport const StyledNav = styled.ul`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0;\r\n    width: 100%;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    padding: 10px;\r\n    list-style: none;\r\n    font-size: 20px;\r\n`\r\n\r\nexport const NavItems = styled.li`\r\n    margin: 20px 30px;\r\n    padding: 2px 0;\r\n    border-bottom: 2px solid transparent;\r\n    transition: 0.3s;\r\n        &:hover{\r\n            border-bottom: 2px solid ${({ theme }) => theme.color.white};\r\n        }\r\n       \r\n`\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(props => ({\r\n    activeClassName\r\n}))`\r\n    color: ${({ theme }) => theme.color.white};\r\n    text-decoration: none;\r\n       \r\n        &.${activeClassName} {\r\n         color: ${({ theme }) => theme.color.white};\r\n         font-weight: bold;\r\n        }`","import React from \"react\"\r\nimport { HashRouter, Switch, Route, Redirect, } from \"react-router-dom\"\r\nimport TasksPage from \"./features/tasks/TasksPage\"\r\nimport TaskPage from \"./features/tasks/TaskPage\"\r\nimport Author from \"./features/author\"\r\nimport { StyledNavLink, StyledNav, NavItems } from \"./common/NavigationStyles\"\r\n\r\n\r\n\r\n\r\nconst App = () => \r\n        <HashRouter>\r\n            <nav>\r\n                <StyledNav>\r\n                    <NavItems>\r\n                        <StyledNavLink\r\n                            to=\"/zadania\"\r\n                        >\r\n                            Zadania\r\n                    </StyledNavLink>\r\n                    </NavItems>\r\n                    <NavItems>\r\n                        <StyledNavLink\r\n                            to=\"/oAutorze\"\r\n                        >\r\n                            o Autorze\r\n                    </StyledNavLink>\r\n                    </NavItems>\r\n                </StyledNav>\r\n                <Switch>\r\n                    <Route\r\n                        path=\"/zadania/:id\"\r\n                    >\r\n                        <TaskPage />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/zadania\"\r\n                    >\r\n                        <TasksPage />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/oAutorze\"\r\n                    >\r\n                        <Author />\r\n                    </Route>\r\n                    <Route\r\n                        path=\"/\"\r\n                    >\r\n                        <Redirect\r\n                            to=\"/zadania\"\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </nav>\r\n        </HashRouter>\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const theme = {\r\n    color: {\r\n        gray: \"#eee\",\r\n        teal: \"#006666\",\r\n        silver: \"#ddd\",\r\n        white: \"#fff\",\r\n        green: \"#008000\",\r\n        red: \"#FF0000\"\r\n        \r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        tabletMax: 991\r\n    }\r\n}","export const getExampleTasks = async ()  => {\r\n    const response =  await fetch(\"To-do-list-React/exampleTasks.JSON\")\r\n\r\n    if (!response.ok) {\r\n        new Error (response.statusText)\r\n    }\r\n    return await response.json()\r\n}","import { takeEvery, call, put, select, delay } from \"redux-saga/effects\"\r\nimport { fetchExampleTasks, setTasks, selectTasks, setLoadingStatus } from \"./tasksSlice\"\r\nimport { getExampleTasks } from \"./getExampleTasks\"\r\nimport { saveTasksToLocalStorage } from \"./tasksLocalStorage\"\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield put(setLoadingStatus(\"loading\"))\r\n        yield delay(1000)\r\n        const exampleTasks = yield call(getExampleTasks)\r\n        yield put(setTasks(exampleTasks))\r\n        yield put(setLoadingStatus(\"success\"))\r\n    } catch (error) {\r\n        yield put(setLoadingStatus(\"failed\"))\r\n        yield call(alert(\"coś poszło nie tak\"))\r\n    }\r\n}\r\n\r\n\r\nfunction* saveTasksToLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks)\r\n    yield call(saveTasksToLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler )\r\n    yield takeEvery(\"*\", saveTasksToLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\"\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga()\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport tasksReducer from \"./features/tasks/tasksSlice\"\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport rootSaga from \"./rootSaga\"\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        listInformation: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GlobalStyle } from \"./GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport { Provider } from \"react-redux\"\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\"\r\nimport store from \"./store\"\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}