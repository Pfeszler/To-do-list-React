{"version":3,"sources":["GlobalStyles.js","common/Container/styled.js","common/Container/index.js","common/Header/styled.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/index.js","App.js","serviceWorker.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gray","StyledContainer","styled","main","breakpoint","tabletMax","Container","children","StyledHeader","header","Title","h1","Header","title","className","StyledSection","section","white","HeaderContainer","div","mobileMax","h2","Section","body","extraHeaderContent","saveTasksToLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","exampleTasks","actions","selectListInformation","listInformation","selectTasks","StyledForm","form","Input","input","silver","Button","button","teal","Form","useState","newTaskContent","setNewTaskContent","trimmedNewTaskContent","trim","dispatch","useDispatch","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","content","nanoid","ref","placeholder","value","onChange","target","ButtonContainer","HeaderButton","invisible","css","Buttons","useSelector","tasksNotDoneLength","filter","length","onClick","disabled","List","ul","Item","li","hidden","Text","span","toggleDone","green","remove","red","TasksList","map","key","Tasks","App","Boolean","window","location","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksToLocalStorageHandler","tasksSaga","call","put","alert","select","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4hBAEO,IAAMA,EAAcC,YAAH,KAUI,qBAAGC,MAAkBC,MAAMC,Q,2LCVhD,IAAMC,EAAkBC,IAAOC,KAAV,KAGH,qBAAGL,MAAkBM,WAAWC,aCK1CC,EANG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,kBAACN,EAAD,KACKM,I,iNCJF,IAAMC,EAAeN,IAAOO,OAAV,KAIZC,EAAQR,IAAOS,GAAV,KCQHC,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAACL,EAAD,CACIM,UAAU,UAEV,kBAACJ,EAAD,KACKG,K,mlBCPN,IAAME,EAAgBb,IAAOc,QAAV,KACF,qBAAGlB,MAAkBC,MAAMkB,SAKtCC,EAAkBhB,IAAOiB,IAAV,KAMH,qBAAGrB,MAAkBM,WAAWgB,aAM5CR,EAASV,IAAOmB,GAAV,KCAJC,EAhBC,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOU,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,kBAACT,EAAD,KACI,kBAACG,EAAD,KACI,kBAAC,EAAD,KACKL,GAEJW,GAEL,6BACKD,K,gBCXAE,EAA0B,SAAAC,GACnCC,aAAaC,QAHO,QAGkBC,KAAKC,UAAUJ,KCAnDK,EAAaC,YAAY,CAC3BC,KAAM,kBACNC,aAAc,CACVR,MDAuCG,KAAKM,MAAMR,aAAaS,QAN/C,WAM4E,GCC5FC,UAAU,GAEdC,SAAU,CACNC,QAAS,cAAmC,IAAhCb,EAA+B,EAA/BA,MAAoBc,EAAW,EAApBC,QACnBf,EAAMgB,KAAKF,IAEfG,eAAgB,SAAAC,GACZA,EAAMP,UAAYO,EAAMP,UAE5BQ,eAAgB,cAA6B,IAA1BnB,EAAyB,EAAzBA,MAAWe,EAAc,EAAdA,QACpBK,EAAQpB,EAAMqB,WAAU,SAAAP,GAAI,OAAIA,EAAKQ,KAAOP,KAClDf,EAAMoB,GAAOG,MAAQvB,EAAMoB,GAAOG,MAEtCC,WAAY,cAA6B,IAA1BxB,EAAyB,EAAzBA,MAAWe,EAAc,EAAdA,QAChBK,EAAQpB,EAAMqB,WAAU,SAAAP,GAAI,OAAIA,EAAKQ,KAAOP,KAClDf,EAAMyB,OAAOL,EAAO,IAExBM,WAAY,YAAe,EAAZ1B,MACL2B,SAAQ,SAACb,GACXA,EAAKS,MAAO,MAGpBK,kBAAmB,aACnBC,SAAU,SAACX,EAAD,GAAuC,IAApBY,EAAmB,EAA5Bf,QAChBG,EAAMlB,MAAQ8B,M,EActBzB,EAAW0B,QAPXlB,E,EAAAA,QACAI,E,EAAAA,eACAE,E,EAAAA,eACAK,E,EAAAA,WACAE,E,EAAAA,WACAE,E,EAAAA,kBACAC,E,EAAAA,SAESG,EAAwB,SAAC,GAAD,SAAGC,iBAC3BC,EAAc,SAAC,GAAD,SAAGD,gBAAsCjC,OAErDK,IAAf,Q,09BC9CO,IAAM8B,EAAa3D,IAAO4D,KAAV,KAIE,qBAAGhE,MAAkBM,WAAWC,aAK5C0D,EAAQ7D,IAAO8D,MAAV,KAMY,qBAAGlE,MAAkBC,MAAMkE,UAEhC,qBAAGnE,MAAkBM,WAAWC,aAK5C6D,EAAShE,IAAOiE,OAAV,KAIK,qBAAGrE,MAAkBC,MAAMqE,QACtC,qBAAGtE,MAAkBC,MAAMkB,SAcf,qBAAGnB,MAAkBM,WAAWC,aCC1CgE,EAvCF,WAAO,IAAD,EAE6BC,mBAAS,IAFtC,mBAERC,EAFQ,KAEQC,EAFR,KAGTC,EAAwBF,EAAeG,OACvCC,EAAWC,cAaXC,EAAWC,iBAAO,MAClBC,EAAa,WACfF,EAASG,QAAQC,SAGrB,OACI,kBAACpB,EAAD,CACIqB,SAnBa,SAACC,GAClBA,EAAMC,iBACwB,KAA1BX,GACAE,EAASpC,EAAQ,CACb8C,QAASZ,EACTxB,MAAM,EACND,GAAIsC,iBAGZd,EAAkB,IAClBO,MAWI,kBAAChB,EAAD,CACIwB,IAAKV,EACLW,YAAY,wBACZC,MAAOlB,EACPmB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBnB,EAAkBmB,EAAOF,UAEvD,kBAACvB,EAAD,wB,0rBCpCL,IAAM0B,EAAkB1F,IAAOiB,IAAV,KACH,qBAAGrB,MAAkBM,WAAWgB,aAM5CyE,EAAe3F,IAAOiE,OAAV,KAIZ,qBAAGrE,MAAkBC,MAAMqE,QAGlC,qBAAG0B,WAA6BC,YAAJ,QAcjB,qBAAGjG,MAAkBC,MAAMC,QAGnB,qBAAGF,MAAkBM,WAAWgB,aCC1C4E,GA7BC,WAAO,IAAD,EAEUC,YAAYvC,GAAhChC,EAFU,EAEVA,MAAOW,EAFG,EAEHA,SACTsC,EAAWC,cACXsB,EAAqBxE,EAAMyE,QAAO,qBAAGlD,QAAkBmD,OAE7D,OACI,kBAACR,EAAD,KACI,kBAACC,EAAD,CACIQ,QAAS,kBAAM1B,EAASrB,OAD5B,oCAKA,kBAACuC,EAAD,CACIC,YAAWpE,EAAM0E,OAAS,GAC1BC,QAAS,kBAAM1B,EAAShC,OAEvBN,EAAW,4BAAoB,wBAEpC,kBAACwD,EAAD,CACIC,YAAWpE,EAAM0E,OAAS,GAC1BE,WAAUJ,EAAqB,GAC/BG,QAAS,kBAAM1B,EAASvB,OAH5B,2B,y8CCtBL,IAAMmD,GAAOrG,IAAOsG,GAAV,MAIQ,qBAAG1G,MAAkBM,WAAWC,aAK5CoG,GAAOvG,IAAOwG,GAAV,MACc,qBAAG5G,MAAkBC,MAAMkE,UAOpD,qBAAG0C,QAAuBZ,YAAJ,SAGH,qBAAGjG,MAAkBM,WAAWC,aAO5CuG,GAAO1G,IAAO2G,KAAV,MAKX,qBAAG5D,MAAmB8C,YAAJ,SAKX7B,GAAShE,IAAOiE,OAAV,MASb,qBAAG2C,YAA+Bf,YAAJ,MACR,qBAAGjG,MAAkBC,MAAMgH,YAGjD,qBAAGC,QAAuBjB,YAAJ,MACA,qBAAGjG,MAAkBC,MAAMkH,UCRxCC,GAtCG,WAAO,IAAD,EAEQjB,YAAYvC,GAAhChC,EAFY,EAEZA,MAAOW,EAFK,EAELA,SAETsC,EAAWC,cAEjB,OACI,kBAAC2B,GAAD,KACK7E,EAAMyF,KAAI,SAAA3E,GAAI,OACX,kBAACiE,GAAD,CACIW,IAAK5E,EAAKQ,GACV2D,UAAQnE,EAAKS,OAAQZ,IAErB,kBAAC,GAAD,CACIyE,YAAU,EACVT,QAAS,kBAAM1B,EAAS9B,EAAeL,EAAKQ,OAE3CR,EAAKS,KAAO,eAAO,IAExB,kBAAC2D,GAAD,CACI3D,OAAMT,EAAKS,MAEVT,EAAK6C,SAEV,kBAAC,GAAD,CACI2B,QAAM,EACNX,QAAS,kBAAM1B,EAASzB,EAAWV,EAAKQ,GAAI,MAFhD,4BCCLqE,OAxBf,WAEI,OACI,yBAAKvG,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,EAAD,CACID,MAAM,qBACV,kBAAC,EAAD,CACIA,MAAM,qBACNU,KAAM,kBAAC,EAAD,QAEV,kBAAC,EAAD,CACIV,MAAM,mBACNU,KACI,kBAAC,GAAD,MAEJC,mBACI,kBAAC,GAAD,WClBT8F,GAJH,kBACR,kBAAC,GAAD,OCQgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBC,I,8CCAMC,GAAe,yCAAG,6BAAAC,EAAA,sEACHC,MAAM,4DADH,cACrBC,EADqB,QAGbC,IACV,IAAIC,MAAOF,EAASG,YAJG,SAMdH,EAASI,OANK,mFAAH,qD,aCKlBC,I,aASAC,I,aAKOC,IAdjB,SAAUF,KAAV,wEAE6B,OAF7B,kBAEmCG,aAAKX,IAFxC,OAGQ,OADMpE,EAFd,gBAGcgF,aAAIjF,EAASC,IAH3B,8BAKQ,OALR,mCAKc+E,aAAKE,MAAM,iCALzB,sDASA,SAAUJ,KAAV,wEACkB,OADlB,SACwBK,aAAO9E,GAD/B,OAEI,OADMlC,EADV,gBAEU6G,aAAK9G,EAAyBC,GAFxC,wCAKO,SAAU4G,KAAV,kEACH,OADG,SACGK,aAAUrF,EAAkBsF,KAAMR,IADrC,OAEH,OAFG,SAEGO,aAAU,IAAKN,IAFlB,wC,iBCjBkBQ,IAAV,SAAUA,KAAV,kEACX,OADW,SACLC,aAAI,CACNR,OAFO,wCCIf,IAAMS,GAAiBC,eAEjBC,GAAQC,YAAe,CACzBC,QAAS,CACLxF,gBAAiByF,GAErBC,WAAY,CAACN,MAGjBA,GAAeO,IAAIT,IAEJI,UCNfM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,IAAD,CAAenJ,MLdA,CACjBC,MAAO,CACHC,KAAM,OACNoE,KAAM,UACNH,OAAQ,OACRhD,MAAO,OACP8F,MAAO,UACPE,IAAK,WAGT7G,WAAY,CACRgB,UAAW,IACXf,UAAW,OKGX,kBAACT,EAAD,MACA,kBAAC,GAAD,SAIN8J,SAASC,eAAe,SN+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e80fcad.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gray};\r\n        font-family: 'Montserrat', sans-serif;\r\n        word-break: break-all;\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 0 15px;\r\n    }\r\n`","import React from \"react\"\r\nimport {StyledContainer} from \"./styled\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n)\r\n\r\nexport default Container","import styled from \"styled-components\"\r\n\r\nexport const StyledHeader = styled.header`\r\n    padding: 40px 0 20px 0;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 35px;\r\n    margin: 0;\r\n`","import React from \"react\"\r\nimport {StyledHeader, Title} from \"./styled\"\r\n\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader\r\n        className=\"header\"\r\n    >\r\n        <Title>\r\n            {title}\r\n        </Title>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header","import styled from \"styled-components\"\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-bottom: 10px;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n    padding: 25px;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-wrap: wrap;\r\n        flex-direction: column;\r\n}\r\n`\r\n\r\nexport const Header = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n`\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { StyledSection, HeaderContainer, Header } from \"./styled\"\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        <div>\r\n            {body}\r\n        </div>\r\n\r\n    </StyledSection>\r\n)\r\n\r\n\r\nexport default Section","const localStorageKey = \"tasks\"\r\n\r\nexport const saveTasksToLocalStorage = tasks => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks))\r\n}\r\n\r\nexport const getTasksFromLocalStorage = () =>  JSON.parse(localStorage.getItem(localStorageKey)) || []\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"listInformation\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task)\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks[index].done = !tasks[index].done\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const index = tasks.findIndex(task => task.id === payload);\r\n            tasks.splice(index, 1)\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach((task) => {\r\n                task.done = true;\r\n            });\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, { payload: exampleTasks }) => {\r\n            state.tasks = exampleTasks\r\n        }\r\n    },\r\n}\r\n)\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks\r\n} = tasksSlice.actions;\r\nexport const selectListInformation = ({ listInformation }) => listInformation\r\nexport const selectTasks = ({ listInformation }) => listInformation.tasks\r\nexport const selectHideDone = ({ listInformation }) => listInformation.hideDone\r\nexport default tasksSlice.reducer\r\n\r\n","\r\nimport styled from \"styled-components\"\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 10px 25px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nexport const Input = styled.input`\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    margin-left: 0px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 2px ${({ theme }) => theme.color.silver};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 20%;\r\n    align-self: center;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        min-width: 230px;\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\"\r\nimport { nanoid } from \"@reduxjs/toolkit\"\r\nimport { addTask } from \"../tasksSlice\"\r\nimport { StyledForm, Button, Input } from \"./styled\"\r\n\r\nconst Form = () => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const trimmedNewTaskContent = newTaskContent.trim()\r\n    const dispatch = useDispatch()\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (trimmedNewTaskContent !== \"\") {\r\n            dispatch(addTask({\r\n                content: trimmedNewTaskContent,\r\n                done: false,\r\n                id: nanoid()\r\n            }))\r\n        };\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n    const inputRef = useRef(null)\r\n    const focusInput = () => {\r\n        inputRef.current.focus()\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>\r\n                Dodaj Zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import styled, { css } from \"styled-components\"\r\n\r\nexport const ButtonContainer = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const HeaderButton = styled.button`\r\n    border: none;\r\n    padding: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.3s;\r\n\r\n    ${({ invisible }) => invisible && css`\r\n        display: none;\r\n    `\r\n    }\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.gray}\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-top: 30px\r\n    }\r\n`","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { ButtonContainer, HeaderButton } from \"./styled\"\r\nimport { selectListInformation, toggleHideDone, setAllDone, fetchExampleTasks } from \"../tasksSlice\"\r\n\r\nconst Buttons = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectListInformation);\r\n    const dispatch = useDispatch()\r\n    const tasksNotDoneLength = tasks.filter(({ done }) => !done).length\r\n\r\n    return (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n            >\r\n                Pobierz przykładowe zadania\r\n            </HeaderButton>\r\n            <HeaderButton\r\n                invisible={tasks.length > 0 ? false : true}\r\n                onClick={() => dispatch(toggleHideDone())}\r\n            >\r\n                {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n            </HeaderButton>\r\n            <HeaderButton\r\n                invisible={tasks.length > 0 ? false : true}\r\n                disabled={tasksNotDoneLength > 0 ? false : true}\r\n                onClick={() => dispatch(setAllDone())}\r\n            >\r\n                Ukończ wszystkie\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\nexport default Buttons","import styled, { css } from \"styled-components\"\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        padding: 5px;\r\n    }\r\n`\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    display: flex;\r\n    padding: 10px;\r\n    margin: 20px 10px;\r\n    line-height: 1.5em;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px 0;\r\n        padding: 0;\r\n        padding-bottom: 10px\r\n    }\r\n`\r\n\r\nexport const Text = styled.span`\r\n    flex-basis: 100%;\r\n    flex-shrink: 1;\r\n    margin: 0 20px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    outline: none;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n\r\n    &:active {\r\n            filter: brightness(120%)\r\n        }\r\n`","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { List, Item, Text, Button } from \"./styled\"\r\nimport { selectListInformation, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\n\r\nconst TasksList = () => {\r\n\r\n    const { tasks, hideDone } = useSelector(selectListInformation)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone ? true : false}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    <Text\r\n                        done={task.done ? true : false}\r\n                    >\r\n                        {task.content}\r\n                    </Text>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id, 1))}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n};\r\n\r\n\r\nexport default TasksList","import React from 'react';\r\nimport Container from \"../../common/Container\"\r\nimport Header from \"../../common/Header\"\r\nimport Section from \"../../common/Section\"\r\nimport Form from \"./Form\"\r\nimport Buttons from \"./Buttons\"\r\nimport TasksList from \"./TasksList\"\r\n\r\nfunction Tasks() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Header\r\n                    title=\"Lista zadań\" />\r\n                <Section\r\n                    title=\"Dodaj nowe zadanie\"\r\n                    body={<Form />}\r\n                />\r\n                <Section\r\n                    title=\"Lista zadań\"\r\n                    body={\r\n                        <TasksList\r\n                        />}\r\n                    extraHeaderContent={\r\n                        <Buttons\r\n                        />}\r\n                />\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\nexport default Tasks;\r\n","import React from \"react\"\r\nimport Tasks from \"./features/tasks\"\r\n\r\nconst App = () => (\r\n    <Tasks />\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const theme = {\r\n    color: {\r\n        gray: \"#eee\",\r\n        teal: \"#006666\",\r\n        silver: \"#ddd\",\r\n        white: \"#fff\",\r\n        green: \"#008000\",\r\n        red: \"#FF0000\"\r\n        \r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        tabletMax: 991\r\n    }\r\n}","export const getExampleTasks = async ()  => {\r\n    const response =  await fetch(\"http://localhost:3000/To-do-list-React/exampleTasks.JSON\")\r\n\r\n    if (!response.ok) {\r\n        new Error (response.statusText)\r\n    }\r\n    return await response.json()\r\n}","import { takeEvery, call, put, select } from \"redux-saga/effects\"\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\"\r\nimport { getExampleTasks } from \"./getExampleTasks\"\r\nimport { saveTasksToLocalStorage } from \"./tasksLocalStorage\"\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks)\r\n        yield put(setTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call(alert(\"coś poszło nie tak\"))\r\n    }\r\n}\r\n\r\nfunction* saveTasksToLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks)\r\n    yield call(saveTasksToLocalStorage, tasks)\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler)\r\n    yield takeEvery(\"*\", saveTasksToLocalStorageHandler)\r\n}","import { all } from \"redux-saga/effects\"\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\"\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga()\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport tasksReducer from \"./features/tasks/tasksSlice\"\r\nimport createSagaMiddleware from \"redux-saga\"\r\nimport rootSaga from \"./rootSaga\"\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        listInformation: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GlobalStyle } from \"./GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport { Provider } from \"react-redux\"\r\nimport App from \"./App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\"\r\nimport store from \"./store\"\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}