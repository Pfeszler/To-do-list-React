{"version":3,"sources":["GlobalStyles.js","App/useLocalStorageState.js","App/Container/styled.js","App/Container/index.js","App/Header/styled.js","App/Header/index.js","App/Section/styled.js","App/Section/index.js","App/Form/styled.js","App/Form/index.js","App/Buttons/styled.js","App/Buttons/index.js","App/Tasks/styled.js","App/Tasks/index.js","App/index.js","App/useTasks.js","App/useHideDone.js","serviceWorker.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gray","useLocalStorageState","keyState","initialValue","useState","localStorageState","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","StyledContainer","styled","main","breakpoint","tabletMax","Container","children","StyledHeader","header","Title","h1","Header","title","className","StyledSection","section","white","HeaderContainer","div","mobileMax","h2","Section","body","extraHeaderContent","StyledForm","form","Input","input","silver","Button","button","teal","Form","addNewTask","newTaskContent","setNewTaskContent","inputRef","useRef","focusInput","current","focus","onSubmit","event","preventDefault","trim","ref","placeholder","value","onChange","target","ButtonContainer","HeaderButton","Buttons","tasks","hideDone","toggleHideDone","setAllDone","tasksNotDoneLength","filter","done","length","onClick","disabled","List","ul","Item","li","hidden","css","Text","span","toggleDone","green","remove","red","Tasks","removeTask","toggleTaskDone","map","task","key","id","content","App","setTasks","useTasks","setHideDone","useHideDone","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6d0014c.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gray};\r\n        font-family: 'Montserrat', sans-serif;\r\n        word-break: break-all;\r\n    }\r\n`","import {useState, useEffect} from \"react\"\r\n\r\nexport const useLocalStorageState = (keyState, initialValue) => {\r\n    const getInintialState = () => {\r\n    const localStorageState = localStorage.getItem(keyState);\r\n    return localStorageState ? JSON.parse(localStorageState) : initialValue\r\n    \r\n}\r\nconst [state, setState] = useState(getInintialState)\r\n\r\nuseEffect(() => {\r\n    localStorage.setItem(keyState, JSON.stringify(state))\r\n}, [state]);\r\n\r\nreturn [state, setState] \r\n};","import styled from \"styled-components\"\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    margin: 0 auto;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 0 15px;\r\n    }\r\n`","import React from \"react\"\r\nimport {StyledContainer} from \"./styled\"\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n)\r\n\r\nexport default Container","import styled from \"styled-components\"\r\n\r\nexport const StyledHeader = styled.header`\r\n    padding: 40px 0 20px 0;\r\n`\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 35px;\r\n    margin: 0;\r\n`","import React from \"react\"\r\nimport {StyledHeader, Title} from \"./styled\"\r\n\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader\r\n        className=\"header\"\r\n    >\r\n        <Title>\r\n            {title}\r\n        </Title>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header","import styled from \"styled-components\"\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin-bottom: 10px;\r\n    box-shadow: 0px 0px 2px 2px #ddd;\r\n`\r\n\r\nexport const HeaderContainer = styled.div`\r\n    padding: 25px;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    text-align: center;\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-wrap: wrap;\r\n        flex-direction: column;\r\n}\r\n`\r\n\r\nexport const Header = styled.h2`\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: left;\r\n`\r\n\r\n\r\n\r\n","import React from \"react\"\r\nimport { StyledSection, HeaderContainer, Header } from \"./styled\"\r\n\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <StyledSection>\r\n        <HeaderContainer>\r\n            <Header>\r\n                {title}\r\n            </Header>\r\n            {extraHeaderContent}\r\n        </HeaderContainer>\r\n        <div>\r\n            {body}\r\n        </div>\r\n\r\n    </StyledSection>\r\n)\r\n\r\n\r\nexport default Section","\r\nimport styled from \"styled-components\"\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 10px 25px;\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nexport const Input = styled.input`\r\n    flex-basis: 100%;\r\n    padding: 10px;\r\n    margin: 20px;\r\n    margin-left: 0px;\r\n    border: none;\r\n    box-shadow: 0 0 2px 2px ${({ theme }) => theme.color.silver};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px;\r\n    }\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-basis: 20%;\r\n    align-self: center;\r\n    padding: 10px;\r\n    background-color: ${({ theme }) => theme.color.teal};\r\n    color: ${({ theme }) => theme.color.white};\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n        transform: scale(1.05);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        min-width: 230px;\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n`","import React, { useState, useRef } from \"react\";\r\nimport {StyledForm, Button,Input } from \"./styled\"\r\n\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n        focusInput();\r\n    }\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus()\r\n    }\r\n\r\n    return (\r\n        <StyledForm\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <Input\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button>\r\n                Dodaj Zadanie\r\n            </Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form\r\n\r\n\r\n","import styled from \"styled-components\"\r\n\r\nexport const ButtonContainer = styled.div`\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nexport const HeaderButton = styled.button`\r\n    border: none;\r\n    padding: none;\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.teal};\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n\r\n    &:disabled {\r\n        color: ${({ theme }) => theme.color.gray}\r\n    }\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-top: 30px\r\n    }\r\n`","import React from \"react\"\r\nimport {ButtonContainer, HeaderButton } from \"./styled\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => {\r\n    const tasksNotDoneLength = tasks.filter(({ done }) => !done).length\r\n    \r\n    return tasks.length > 0 && (\r\n        <ButtonContainer>\r\n            <HeaderButton\r\n                onClick={toggleHideDone}\r\n            >\r\n                {hideDone ? \"Pokaż ukończone\" : \"Ukryj Ukończone\"}\r\n            </HeaderButton>\r\n            <HeaderButton\r\n                disabled={tasksNotDoneLength > 0 ? false : true}\r\n                onClick={setAllDone}\r\n            >\r\n                Ukończ wszystkie\r\n            </HeaderButton>\r\n        </ButtonContainer>\r\n    )\r\n}\r\nexport default Buttons","import styled, { css } from \"styled-components\"\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    padding: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        padding: 5px;\r\n    }\r\n`\r\n\r\nexport const Item = styled.li`\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.silver};\r\n    display: flex;\r\n    padding: 10px;\r\n    margin: 20px 10px;\r\n    line-height: 1.5em;\r\n    align-items: center;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.tabletMax}px) {\r\n        margin: 10px 0;\r\n        padding: 0;\r\n        padding-bottom: 10px\r\n    }\r\n`\r\n\r\nexport const Text = styled.span`\r\n    flex-basis: 100%;\r\n    flex-shrink: 1;\r\n    margin: 0 20px;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 32px;\r\n    height: 32px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n    outline: none;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.red};\r\n    `}\r\n    &:hover {\r\n            filter: brightness(110%)\r\n        }\r\n\r\n    &:active {\r\n            filter: brightness(120%)\r\n        }\r\n`","import React from \"react\"\r\nimport { List, Item, Text, Button } from \"./styled\"\r\n\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => {\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone ? true : false}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => toggleTaskDone(task.id)}\r\n                    >\r\n                        {task.done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    <Text\r\n                        done={task.done ? true : false}\r\n                    >\r\n                        {task.content}\r\n                    </Text>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => removeTask(task.id)}\r\n                    >\r\n                        🗑️\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n\r\n        </List>\r\n    )\r\n};\r\n\r\n\r\nexport default Tasks","import React from 'react';\r\nimport { useHideDone } from \"./useHideDone\"\r\nimport { useTasks } from \"./useTasks\"\r\nimport Container from \"./Container\"\r\nimport Header from \"./Header\"\r\nimport Section from \"./Section\"\r\nimport Form from \"./Form\"\r\nimport Buttons from \"./Buttons\"\r\nimport Tasks from \"./Tasks\"\r\n\r\n\r\nfunction App() {\r\n\r\n    const [tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask\r\n    ] = useTasks()\r\n\r\n    const [hideDone,\r\n        toggleHideDone\r\n    ]= useHideDone()\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container>\r\n                <Header\r\n                    title=\"Lista zadań\" />\r\n                <Section\r\n                    title=\"Dodaj nowe zadanie\"\r\n                    body={<Form\r\n                        addNewTask={addNewTask} />} />\r\n                <Section\r\n                    title=\"Lista zadań\"\r\n                    body={\r\n                        <Tasks\r\n                            tasks={tasks}\r\n                            hideDone={hideDone}\r\n                            removeTask={removeTask}\r\n                            toggleTaskDone={toggleTaskDone}\r\n                        />}\r\n                    extraHeaderContent={\r\n                        <Buttons\r\n                            tasks={tasks}\r\n                            hideDone={hideDone}\r\n                            toggleHideDone={toggleHideDone}\r\n                            setAllDone={setAllDone}\r\n                        />}\r\n                />\r\n            </Container>\r\n        </div >\r\n    );\r\n}\r\nexport default App;\r\n","import { useLocalStorageState } from \"./useLocalStorageState\"\r\n\r\nexport const useTasks = () => {\r\n    const [tasks, setTasks] = useLocalStorageState(\"tasks\", []);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id))\r\n    }\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            }\r\n            return task\r\n        }));\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => (\r\n            { ...task, done: true })\r\n        ));\r\n    }\r\n\r\n    const addNewTask = (newTaskContent) => {\r\n        if (newTaskContent.trim() !== \"\") {\r\n            setTasks(tasks =>\r\n                [...tasks,\r\n                {\r\n                    id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n                    content: newTaskContent,\r\n                    done: false\r\n                }]);\r\n        }\r\n    };\r\n    return [tasks, removeTask, toggleTaskDone, setAllDone, addNewTask]\r\n}","\r\nimport { useLocalStorageState } from \"./useLocalStorageState\"\r\nexport const useHideDone = () => {\r\nconst [hideDone, setHideDone] = useLocalStorageState(\"hideDone\", false);\r\nconst toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone)\r\n};\r\nreturn [hideDone, toggleHideDone]\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { GlobalStyle } from \"./GlobalStyles\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { theme } from \"./theme\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <GlobalStyle />\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const theme = {\r\n    color: {\r\n        gray: \"#eee\",\r\n        teal: \"#006666\",\r\n        silver: \"#ddd\",\r\n        white: \"#fff\",\r\n        green: \"#008000\",\r\n        red: \"#FF0000\"\r\n        \r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        tabletMax: 991\r\n    }\r\n}"],"sourceRoot":""}